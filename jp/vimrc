" header line
" vimrc configuration
" vim: sw=2 sts=2
" ===== Dein plugin ===== {{{
if &compatible
  set nocompatible
endif 
let s:dein_dir = expand('~/.cache/dein')
let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'

if &runtimepath !~# '/dein.vim'
  if !isdirectory(s:dein_repo_dir)
    execute '!git clone https://github.com/Shougo/dein.vim' s:dein_repo_dir
  endif
  execute 'set runtimepath^=' . fnamemodify(s:dein_repo_dir, ':p')
endif

if dein#load_state(s:dein_dir)
  call dein#begin(s:dein_dir)
  let g:rc_dir    = expand('~/.vim/rc')
  let s:toml      = g:rc_dir . '/dein.toml'
  let s:lazy_toml = g:rc_dir . '/dein_lazy.toml'

  call dein#load_toml(s:toml,      {'lazy': 0})
  call dein#load_toml(s:lazy_toml, {'lazy': 1})

  call dein#end()
  call dein#save_state()
endif

if dein#check_install()
  call dein#install()
endif
" }}}

set expandtab hidden number
set shiftwidth=4
set softtabstop=4
set fileencodings=utf-8,Shift_JIS
set t_Co=256
set laststatus=2
set completeopt=longest,menuone
set foldmethod=marker
set wildmode=list:full
set grepprg=grep\ -nH
set cryptmethod=blowfish2
set scrolloff=5
set ttyfast
set lazyredraw

filetype plugin indent on

let g:devhelpSearch = 1

" ===== syntastic settings ===== {{{
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
" }}}

" ===== neocomplete settings ===== {{{
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_ignore_case = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

inoremap <expr><CR> pumvisible() ? neocomplete#close_popup() : "<CR>"

autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags ts=2
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags ts=2
autocmd FileType php setlocal omnifunc=phpcomplete#CompletePHP ts=4 noexpandtab
autocmd FileType json setlocal conceallevel=0
autocmd FileType yaml setlocal ts=2 expandtab sw=2
autocmd FileType make setlocal sw=4 sts=4 ts=4
" }}}

" ===== snippets settings ===== {{{
if !exists("g:neosnippet#snippets_directory")
  let g:neosnippet#snippets_directory=""
endif
let g:neosnippet#snippets_directory="$HOME/.vim/snippets"
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable() <Bar><bar> neosnippet#jumpable() ?  "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable() <Bar><bar> neosnippet#jumpable() ?  "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
"  snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif
" }}}

" ===== auto command ===== {{{
augroup es6_syntax
  autocmd!
  autocmd BufNewFile,BufRead *.es6 setlocal filetype=javascript
augroup END

augroup template_file
  autocmd!
  autocmd BufNewFile *.java 0r ~/.vim/templates/skelton.java
augroup END

" edit *.gz file from vim help ex:help gzip-example
augroup gzip
  autocmd!
  autocmd BufReadPre,FileReadPre	*.gz set bin
  autocmd BufReadPost,FileReadPost	*.gz '[,']!gunzip
  autocmd BufReadPost,FileReadPost	*.gz set nobin
  autocmd BufReadPost,FileReadPost	*.gz execute ":doautocmd BufReadPost " . expand("%:r")
  autocmd BufWritePost,FileWritePost	*.gz !mv <afile> <afile>:r
  autocmd BufWritePost,FileWritePost	*.gz !gzip <afile>:r
  autocmd FileAppendPre		        *.gz !gunzip <afile>
  autocmd FileAppendPre		        *.gz !mv <afile>:r <afile>
  autocmd FileAppendPost		*.gz !mv <afile> <afile>:r
  autocmd FileAppendPost		*.gz !gzip <afile>:r
augroup END

" }}}

" ===== color scheme ===== {{{
let g:airline#extensinos#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_inactive_collapse = 0
let g:airline_theme = 'papercolor'
set background=dark

colorscheme hybrid
highlight Normal ctermbg=NONE
highlight VertSplit ctermfg=darkgrey
highlight LineNr ctermfg=darkgrey
highlight Search cterm=NONE ctermfg=234 ctermbg=131
" cursor line
augroup vimrc_set_cursorline_only_active_window
  autocmd!
  autocmd VimEnter,BufWinEnter,WinEnter * setlocal cursorline
  autocmd WinLeave * setlocal nocursorline
  " highlight CursorLine term=NONE cterm=NONE ctermfg=NONE ctermbg=darkgrey
augroup END
" }}}

" ===== IME settings ===== {{{
let IM_CtrlMode = 1
" let IMState = 2 
inoremap <silent> <C-o> <C-r>=IMState('FixMode')<CR>
let g:airline_section_c= "%t %{IMStatus('[Êó•Êú¨Ë™ûÂõ∫ÂÆö]')}"
" dummy function for if not found 'im_control'
function! IMStatus(...)
  return ''
endfunction

" IBus 1.5‰ª•Èôç
function! IMCtrl(cmd)
  let cmd = a:cmd
  if cmd == 'On'
    let res = system('ibus engine "mozc-jp"&')
  elseif cmd == 'Off'
    let res = system('ibus engine "xkb:jp::jpn"&')
  endif
  return ''
endfunction

" <ESC>Êäº‰∏ãÂæå„ÅÆIMÂàáÊõøÈñãÂßã„Åæ„Åß„ÅÆÂèçÂøú„ÅåÈÅÖ„ÅÑÂ†¥Âêà„ÅØttimeoutlen„ÇíÁü≠„ÅèË®≠ÂÆö„Åó„Å¶„Åø„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
" IMCtrl()„ÅÆsystem()„Ç≥„Éû„É≥„ÉâÂÆüË°åÊôÇ„Å´&„Çí‰ªò„Åë„Å¶ÈùûÂêåÊúü„ÅßÂÆüË°å„Åô„Çã„Å®„ÅÑ„ÅÜÊñπÊ≥ï„Åß„ÇÇ‰ΩìÊÑüÈÄüÂ∫¶„Åå‰∏ä„Åå„ÇãÂ†¥Âêà„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ
set timeout timeoutlen=250 ttimeoutlen=200
" }}}

" ===== tcomment settings ===== {{{
let g:tcommentMapLeaderOp1 = ','
" }}}

" ===== tagbar settings ===== {{{
nmap tl :<C-u>TagbarToggle<CR>
" }}}

" ===== key mapping settings ===== {{{
" command line like emacs
cnoremap <C-a> <Home>
cnoremap <C-b> <Left>
cnoremap <C-d> <Del>
cnoremap <C-e> <End>
cnoremap <C-f> <Right>
cnoremap <C-n> <Down>
cnoremap <C-p> <Up>
" delete line after cursor
cnoremap <C-k> <C-\>e getcmdpos() == 1 ? '' : getcmdline()[:getcmdpos()-2]<CR>
" move window and tab
nnoremap <C-n> gt
nnoremap <C-p> gT
" nnoremap [[ [m
" nnoremap ]] ]m
" quit search highlight 
nnoremap <silent> <C-j><C-j> :<C-u>nohlsearch<CR>
" map escape c-j
imap <C-j> <ESC>
vmap <C-j> <ESC>

" key map gui and cli
if has('gui_running')
  set lines=60
  set columns=120

  " if (v:version == 800 && has("patch712"))
  "   set termkey=<A>
  " endif
  " delete word
  inoremap <A-BS> <C-w>
  cnoremap <A-BS> <C-w>
  cnoremap <A-b> <S-Left>
  cnoremap <A-f> <S-Right>
  nnoremap <silent> <A-k> :wincmd k<CR>
  nnoremap <silent> <A-j> :wincmd j<CR>
  nnoremap <silent> <A-h> :wincmd h<CR>
  nnoremap <silent> <A-l> :wincmd l<CR>
  nnoremap <silent> <A-=> :wincmd =<CR>
  nnoremap <silent> <A-+> :wincmd +<CR>
  nnoremap <silent> <A--> :wincmd -<CR>
  nnoremap <silent> <A-<> :wincmd <<CR>
  nnoremap <silent> <A->> :wincmd ><CR>
else
  if (v:version == 800 && has("patch712"))
    set termkey=
  endif
  inoremap <BS> <C-w>
  cnoremap <BS> <C-w>
  cnoremap b <S-Left>
  cnoremap f <S-Right>
  nnoremap <silent> k :wincmd k<CR>
  nnoremap <silent> j :wincmd j<CR>
  nnoremap <silent> l :wincmd l<CR>
  nnoremap <silent> h :wincmd h<CR>
  nnoremap <silent> = :wincmd =<CR>
  nnoremap <silent> + :wincmd +<CR>
  nnoremap <silent> - :wincmd -<CR>
  nnoremap <silent> < :wincmd <<CR>
  nnoremap <silent> > :wincmd ><CR>
  " prevent event tag pop
  nmap <silent> b <Nop><CR>
  nmap <silent> : <Nop><CR>
endif
" }}}

" ===== vimfiler settings ===== {{{
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_enable_auto_cd = 1
let g:vimfiler_tree_leaf_icon = ' '
" let g:vimfiler_force_overwrite_statusline = 1

let mapleader = ','
if system("hostname") == "lenovo\n"
  nnoremap <silent> <Leader>e :<C-u>VimFilerExplorer -auto-expand -winwidth=40<CR>
  nnoremap <silent> <Leader>t :<C-u>VimFilerExplorer -find -winwidth=40<CR>
else
  nnoremap <silent> <Leader>e :<C-u>VimFilerExplorer -auto-expand -winwidth=50<CR>
  nnoremap <silent> <Leader>t :<C-u>VimFilerExplorer -find -winwidth=50<CR>
endif
" autocmd BufEnter * if (winnr('$') == 1 && &filetype ==# 'vimfiler') | q | endif
autocmd FileType vimfiler call s:vimfiler_settings()
function! s:vimfiler_settings()
  " call vimfiler#custom#profile('default', 'context', { 'explorer' : 1, 'force-quit' : 1 })
  " nmap <buffer><expr><CR> vimfiler#smart_cursor_map("\<Plug>(vimfiler_expand_tree)", "\<Plug>(vimfiler_edit_file)")
  nmap <silent><buffer><expr> <C-v> vimfiler#do_switch_action('vsplit')
  nmap <silent><buffer><expr> <C-x> vimfiler#do_switch_action('split')
  nmap <silent><buffer><expr> <C-t> vimfiler#do_action('tabopen')
  nmap <silent><buffer>H <Plug>(vimfiler_cursor_top)
  nmap <silent><buffer>L <Plug>(vimfiler_cursor_bottom)
  setlocal nonumber
endfunction
" }}}

" ===== unite settings ===== {{{
let g:unite_enable_start_insert = 1
" let g:unite_source_file_rec_ignore_pattern = '/.git/'
let mapleader = ','
nnoremap <Leader>r :<C-u>Unite<Space>file_mru<CR>
nnoremap <Leader>k :<C-u>Unite<Space>bookmark<CR>
nnoremap <Leader>j :<C-u>Unite<Space>buffer<CR>
nnoremap <Leader>f :<C-u>Unite<Space>file_rec/async:!<CR>
" nnoremap <silent> <Leader>e :<C-u>Unite<Space>grep:. -buffer-name=search-buffer<CR>
nnoremap <Leader>g :<C-u>Unite<Space>grep:. -buffer-name=search-buffer<CR><C-R><C-W><CR>
" nnoremap <Leader>c :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
" nnoremap <Leader>p :<C-u>UniteWithProjectDir -buffer-name=files buffer file<CR>
autocmd FileType unite call s:unite_settings()
function! s:unite_settings()
  " call unite#custom#profile('default', 'context.ignorecase', 1)
  " call unite#custom#profile('default', 'context.smartcase', 1)
  call unite#custom#profile('default', 'context', { 'ignorecase' : 1, 'smartcase' : 1 })
  " call unite#custom#source('file_rec', 'ignorecase', 'target/*')
  call unite#custom_default_action('source/bookmark/directory', 'vimfiler')
  nnoremap <silent><buffer><expr> <C-x> unite#do_action('split')
  inoremap <silent><buffer><expr> <C-x> unite#do_action('split')
  nnoremap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
  inoremap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
  nnoremap <silent><buffer><expr> <C-t> unite#do_action('tabopen')
  inoremap <silent><buffer><expr> <C-t> unite#do_action('tabopen')
  nnoremap <silent><buffer><expr> <C-f> unite#do_action('vimfiler')
  inoremap <silent><buffer><expr> <C-f> unite#do_action('vimfiler')
endfunction
" }}}

" ===== open browser settings ===== {{{
nmap gw <Plug>(openbrowser-smart-search)
vmap gw <Plug>(openbrowser-smart-search)
" }}}

" ===== fugitive or gina (git wrapper) settings ===== {{{
" let mapleader = "g"
" nnoremap <Leader>o :<C-u>Gstatus<CR>

let mapleader = "g"
nnoremap <Leader>o :<C-u>Gina status<CR>
nnoremap <Leader>j :<C-u>Gina commit<CR>
" }}}

if filereadable(expand('~/.vim/vimrc.local'))
  source ~/.vim/vimrc.local
endif
